/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFSMAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFSMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateInitialStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateFinalStateParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cStateAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cStateStateParserRuleCall_5_0_0 = (RuleCall)cStateAssignment_5_0.eContents().get(0);
		private final Assignment cTransitionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_5_1_0 = (RuleCall)cTransitionAssignment_5_1.eContents().get(0);
		
		//FSM:
		//	{FSM}
		//	'FSM'
		//	name=EString
		//	state+=InitialState
		//	state+=FinalState (state+=State | transition+=Transition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FSM} 'FSM' name=EString state+=InitialState state+=FinalState (state+=State | transition+=Transition)*
		public Group getGroup() { return cGroup; }
		
		//{FSM}
		public Action getFSMAction_0() { return cFSMAction_0; }
		
		//'FSM'
		public Keyword getFSMKeyword_1() { return cFSMKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//state+=InitialState
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//InitialState
		public RuleCall getStateInitialStateParserRuleCall_3_0() { return cStateInitialStateParserRuleCall_3_0; }
		
		//state+=FinalState
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//FinalState
		public RuleCall getStateFinalStateParserRuleCall_4_0() { return cStateFinalStateParserRuleCall_4_0; }
		
		//(state+=State | transition+=Transition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//state+=State
		public Assignment getStateAssignment_5_0() { return cStateAssignment_5_0; }
		
		//State
		public RuleCall getStateStateParserRuleCall_5_0_0() { return cStateStateParserRuleCall_5_0_0; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_5_1() { return cTransitionAssignment_5_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_5_1_0() { return cTransitionTransitionParserRuleCall_5_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInputStateCrossReference_1_0 = (CrossReference)cInputAssignment_1.eContents().get(0);
		private final RuleCall cInputStateEStringParserRuleCall_1_0_1 = (RuleCall)cInputStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutputAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOutputStateCrossReference_2_1_0 = (CrossReference)cOutputAssignment_2_1.eContents().get(0);
		private final RuleCall cOutputStateEStringParserRuleCall_2_1_0_1 = (RuleCall)cOutputStateCrossReference_2_1_0.eContents().get(1);
		
		//Transition:
		//	'transition'
		//	input=[State|EString] ('->' output=[State|EString])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' input=[State|EString] ('->' output=[State|EString])?
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//input=[State|EString]
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//[State|EString]
		public CrossReference getInputStateCrossReference_1_0() { return cInputStateCrossReference_1_0; }
		
		//EString
		public RuleCall getInputStateEStringParserRuleCall_1_0_1() { return cInputStateEStringParserRuleCall_1_0_1; }
		
		//('->' output=[State|EString])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//output=[State|EString]
		public Assignment getOutputAssignment_2_1() { return cOutputAssignment_2_1; }
		
		//[State|EString]
		public CrossReference getOutputStateCrossReference_2_1_0() { return cOutputStateCrossReference_2_1_0; }
		
		//EString
		public RuleCall getOutputStateEStringParserRuleCall_2_1_0_1() { return cOutputStateEStringParserRuleCall_2_1_0_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cState_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFinalStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitialStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//State:
		//	State_Impl | FinalState | InitialState;
		@Override public ParserRule getRule() { return rule; }
		
		//State_Impl | FinalState | InitialState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State_Impl
		public RuleCall getState_ImplParserRuleCall_0() { return cState_ImplParserRuleCall_0; }
		
		//FinalState
		public RuleCall getFinalStateParserRuleCall_1() { return cFinalStateParserRuleCall_1; }
		
		//InitialState
		public RuleCall getInitialStateParserRuleCall_2() { return cInitialStateParserRuleCall_2; }
	}
	public class State_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//State_Impl State:
		//	{State}
		//	'state'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} 'state' name=EString
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FinalStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FinalState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinalStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FinalState:
		//	{FinalState}
		//	'final'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{FinalState} 'final' name=EString
		public Group getGroup() { return cGroup; }
		
		//{FinalState}
		public Action getFinalStateAction_0() { return cFinalStateAction_0; }
		
		//'final'
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InitialState:
		//	{InitialState}
		//	'initial'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitialState} 'initial' name=EString
		public Group getGroup() { return cGroup; }
		
		//{InitialState}
		public Action getInitialStateAction_0() { return cInitialStateAction_0; }
		
		//'initial'
		public Keyword getInitialKeyword_1() { return cInitialKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	
	private final FSMElements pFSM;
	private final TransitionElements pTransition;
	private final StateElements pState;
	private final State_ImplElements pState_Impl;
	private final EStringElements pEString;
	private final FinalStateElements pFinalState;
	private final InitialStateElements pInitialState;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFSM = new FSMElements();
		this.pTransition = new TransitionElements();
		this.pState = new StateElements();
		this.pState_Impl = new State_ImplElements();
		this.pEString = new EStringElements();
		this.pFinalState = new FinalStateElements();
		this.pInitialState = new InitialStateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FSM:
	//	{FSM}
	//	'FSM'
	//	name=EString
	//	state+=InitialState
	//	state+=FinalState (state+=State | transition+=Transition)*;
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}
	
	//Transition:
	//	'transition'
	//	input=[State|EString] ('->' output=[State|EString])?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//State:
	//	State_Impl | FinalState | InitialState;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//State_Impl State:
	//	{State}
	//	'state'
	//	name=EString;
	public State_ImplElements getState_ImplAccess() {
		return pState_Impl;
	}
	
	public ParserRule getState_ImplRule() {
		return getState_ImplAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//FinalState:
	//	{FinalState}
	//	'final'
	//	name=EString;
	public FinalStateElements getFinalStateAccess() {
		return pFinalState;
	}
	
	public ParserRule getFinalStateRule() {
		return getFinalStateAccess().getRule();
	}
	
	//InitialState:
	//	{InitialState}
	//	'initial'
	//	name=EString;
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
