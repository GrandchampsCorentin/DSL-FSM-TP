/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import finalStateMachine.FSM
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import finalStateMachine.State
import finalStateMachine.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var myfsm = resource.contents.get(0) as FSM
        fsa.generateFile(myfsm.name + '.java', generateFSM(myfsm, resource));
		fsa.generateFile("State.java", generateState());
		fsa.generateFile("Transition.java", generateTransition());
	}
	
	def generateTransition() {
		var transitionClass = '''
		public class Transition {
					
					public String name;
					public State input;
					public State output;
					
					public Transition(String p_name,State p_input,State p_output) {
						this.name = p_name;	
						this.input = p_input;
						this.output = p_output;
					}
					
					public String getName() {
						return this.name;	
					}
					
					public void setName(String p_name) {
						this.name = p_name;
					}
					public State getInput() {
						return this.input;	
					}
					
					public void setInput(State p_state) {
						this.input = p_state;
					}
					public State getOutput() {
						return this.output;	
					}
					
					public void setOutput(State p_state) {
						this.output = p_state;
					}
				}
		''';
		
		return transitionClass;
	}
	
	def generateState() {
		var stateClass = '''
		public class State {
					
					public String name;
					
					public State(String p_name) {
						this.name = p_name;	
					}
					
					public String getName() {
						return this.name;	
					}
					
					public void setName(String p_name) {
						this.name = p_name;
					}
				}
		''';
		
		return stateClass;
	}
	
	def String generateFSM(FSM myfsm, Resource resource) {
		
		var fsmClass = '''
		import java.util.ArrayList;
		import java.util.concurrent.TimeUnit;
		
		public class «myfsm.name» {
			
			public ArrayList<State> allStates;
			public ArrayList<Transition> allTransitions;
			public State initialState;
			public State currentState;
			
			public fsm (){
				this.allStates = this.setAllStates();
				this.allTransitions = this.setAllTransitions();
				this.initialState = this.allStates.get(0);
				this.finalState = this.allStates.get(1);
			}
			
			
			private ArrayList<State> setAllStates() {
                ArrayList<State> allRunTimeStates = new ArrayList<State>();
                «FOR state : resource.allContents.filter(State).toIterable»
                State state«state.name» = new State("«state.name»");
                allRunTimeStates.add(state«state.name»); 
                «ENDFOR»

                return allRunTimeStates;
            }
			
			private ArrayList<Transition> setAllTransitions() {
				ArrayList<Transition> allRunTimeTransitions = new ArrayList<Transition>();

	            «FOR transition : resource.allContents.filter(Transition).toIterable»
	            Transition transition«transition.input.name»to«transition.output.name» = new Transition("«transition.name»", returnStateFromArrayList("«transition.input.name»"), returnStateFromArrayList("«transition.output.name»"));
	            allRunTimeTransitions.add(transition«transition.input.name»to«transition.output.name»); 
	            «ENDFOR»
				
				return allRunTimeTransitions;
			}
			
			private State returnStateFromArrayList(String name) {			
				return this.allStates.stream().filter(o -> o.getName().equals(name)).findFirst().get();
			}
			
			public static void main(String[] args)  throws InterruptedException{
				
				 fsm testFsm = new fsm();
		 		 State finalState = testFsm.allStates.get(1);
		 		 State currentState = testFsm.allStates.get(0);
		 		 
				 System.out.println("INITIAL");
				 System.out.println("CurrentState = " + currentState.name);
				 while(currentState != finalState) {
					 int j1 = 0;
					 while(j1 < testFsm.allTransitions.size()) {
						 if(currentState == testFsm.allTransitions.get(j1).getInput()) {
							TimeUnit.SECONDS.sleep(2);
					 		System.out.println(testFsm.allTransitions.get(j1).getInput().getName() + "->" + testFsm.allTransitions.get(j1).getOutput().getName());
					 		currentState = testFsm.allTransitions.get(j1).getOutput();
					 		j1 = testFsm.allTransitions.size();
					 		System.out.println("CurrentState = " + currentState.name);
					 	} else {
					 		j1++;
					 	}
					 }			 
				 }
				 System.out.println("FINAL");
		
					 
			}
			
		}
		''';
		
		return fsmClass;
		
	}
	
}